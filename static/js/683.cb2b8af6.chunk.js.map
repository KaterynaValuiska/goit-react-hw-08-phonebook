{"version":3,"file":"static/js/683.cb2b8af6.chunk.js","mappings":"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","sources":["components/NewContact.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../redux/contactOperations';\n\nexport default function NewContact() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n  const handleInputChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        alert('name or number entered incorrectly');\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: name,\n        number: number,\n      })\n    );\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <h2>Create a contact</h2>\n      <form onSubmit={handleSubmit} className=\"NewContact\">\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n            Name{' '}\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleInputChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              aria-describedby=\"emailHelp\"\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n            Number{' '}\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleInputChange}\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              aria-describedby=\"emailHelp\"\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../redux/contactOperations';\nimport { useEffect } from 'react';\nimport NewContact from '../components/NewContact';\n\nfunction Contacts() {\n  const { items, isLoading } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const onUpdateContact = ({ id, name, number }) => {\n    console.log(id, name, number);\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"Contact\">\n      <NewContact />\n      <div>\n        <h2>Your contacts</h2>\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ul className=\"ContactList\">\n          {items.map(({ name, number, id }) => (\n            <li key={id}>\n              {name}: {number}\n              {'  '}\n              <button\n                type=\"button\"\n                className=\"btn btn-primary BtnDelete\"\n                aria-label=\"Close\"\n                onClick={() => onDeleteContact(id)}\n              >\n                delete\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary BtnDelete\"\n                aria-label=\"Close\"\n                onClick={() => onUpdateContact({ id, name, number })}\n              >\n                update\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"names":["NewContact","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleInputChange","evt","_evt$target","target","value","alert","_jsxs","children","_jsx","onSubmit","preventDefault","find","contact","toLowerCase","concat","addContact","className","htmlFor","type","onChange","pattern","title","required","_useSelector","isLoading","useEffect","fetchContacts","map","_ref2","id","onClick","deleteContact","onDeleteContact","_ref","console","log","onUpdateContact"],"sourceRoot":""}